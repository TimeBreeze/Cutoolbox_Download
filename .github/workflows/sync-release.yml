name: Sync APK and Release Info

on:
  push:
    branches:
      - main
  workflow_dispatch:
    # 允许手动触发workflow

jobs:
  sync-apk-and-release-info:
    runs-on: ubuntu-latest
    steps:
      # 设置GitHub CLI身份信息
      - name: Set up GitHub CLI
        run: |
          echo "${{ secrets.MY_GITHUB_TOKEN }}" | gh auth login --with-token
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      # 获取最新发布的信息并推送到仓库
      - name: Get latest release info and push to repository
        run: |
          # 使用GitHub CLI获取最新发布信息
          LATEST_RELEASE=$(gh api repos/chenzyadb/CuprumTurbo-Scheduler/releases/latest --jq '.tag_name')
          if [ -n "$LATEST_RELEASE" ]; then
            echo "Latest Release: $LATEST_RELEASE"
            gh api repos/chenzyadb/CuprumTurbo-Scheduler/releases/latest --jq '.' > release_info.json
          else
            echo "No release found."
          fi
          git add release_info.json
          git commit -m "Update release info"
          git push origin HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 下载最新的预发布版本的APK文件
      - name: Get latest prerelease APK
        id: prerelease
        run: |
          # 使用GitHub CLI获取最新预发布信息
          LATEST_PRE_RELEASE=$(gh api repos/chenzyadb/CuprumTurbo-Scheduler/releases --jq '.[] | select(.prerelease == true) | .tag_name' | head -n 1)
          if [ -n "$LATEST_PRE_RELEASE" ]; then
            echo "Downloading Prerelease: $LATEST_PRE_RELEASE"
            gh release download $LATEST_PRE_RELEASE --repo chenzyadb/CuprumTurbo-Scheduler --pattern "*.apk" --dir ./downloads
          else
            echo "No prerelease found."
          fi
      
      # 检查APK文件并提交到仓库
      - name: Check and push APK file to repository
        run: |
          ls -l ./downloads/*.apk
          FILES=./downloads/*.apk
          if compgen -G "$FILES" > /dev/null; then
            git fetch
            git checkout ${GITHUB_REF#refs/heads/}
            mv -v ./downloads/*.apk ./
            git add -f *.apk
            git commit -m "Update APK file"
            # 强制推送到远程仓库
            git push origin HEAD:main --force
          else
            echo "No APK files to commit."
          fi